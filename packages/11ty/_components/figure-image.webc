<template webc:nokeep>
  <!---
    Nota bene: `webc:is` does not support dynamic values (see 11ty/webc#143);
    use webc conditional statements and call the `attributes` function multiple times rather than using a fancier pattern of implementation.
  --->
  <canvas-panel webc:if="isCanvas(id, is_static)" @attributes="attributes(id, image_dir, is_static, preset).canvasPanel"></canvas-panel>
  <image-service webc:elseif="isImageService(id, is_static)" @attributes="attributes(id, image_dir, is_static, preset).imageService"></image-service>
  <image-sequence webc:elseif="isSequence(id, is_static)" @attributes="attributes(id, image_dir, is_static, preset).imageSequence"></image-sequence>
  <image-tag webc:else @attributes="attributes(id, image_dir, is_static, preset).imageTag"></image-tag>
</template>
<script webc:setup>
const attributes = (id, image_dir, is_static, preset_override) => {
  const {
    alt,
    canvasId,
    choiceId,
    height,
    iiifContent,
    manifestId,
    margin,
    preset,
    region,
    src,
    startCanvas,
    staticInlineFigureImage,
    textEnabled,
    textSelectionEnabled,
    virtualSizes,
    width
  } = this.getFigure(id)
  return {
    canvasPanel: {
      'canvas-id': canvasId,
      'choice-id': choiceId,
      height,
      'iiif-content': iiifContent,
      'manifest-id': manifestId,
      preset: preset_override || preset,
      region,
      'virtual-sizes': virtualSizes,
      width
    },
    imageSequence: {
      id,
      'manifest-id': manifestId,
      margin,
      preset: preset_override || preset,
      'start-canvas': startCanvas,
      'text-enabled': textEnabled,
      'text-selection-enabled': textSelectionEnabled
    },
    imageService: {
      src
    },
    imageTag: {
      alt,
      image_dir,
      src: is_static && !src ? staticInlineFigureImage : src
    }
  }
}

const shouldRenderCanvas = (id, is_static) => this.getFigure(id).annotations || !is_static
const isCanvas = (id, is_static) => shouldRenderCanvas(id, is_static) && this.getFigure(id).isCanvas
const isImageService = (id, is_static) => shouldRenderCanvas(id, is_static) && this.getFigure(id).isImageService
const isSequence = (id, is_static) => shouldRenderCanvas(id, is_static) && this.getFigure(id).isSequence
</script>
